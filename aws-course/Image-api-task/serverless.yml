service: image-api
frameworkVersion: '3'
configValidationMode: error

plugins:
  - serverless-webpack
  - serverless-offline
  # - serverless-dotenv-plugin
# package:
#   individually: true

# useDotenv: true

custom:
  fileUploadBucketName: image.s3.bucket
  webpack:
    webpackConfig: 'webpack.config.ts' # Name of webpack configuration file
    includeModules: true # Node modules configuration for packaging
    packager: 'npm' # Packager that will be used to package your external modules

provider:
  name: aws
  region: us-east-1
  runtime: nodejs14.x
  stage: dev
  environment:
    user_pool_id: { Ref: UserPool }
    client_id: { Ref: UserClient }
    FILE_UPLOAD_BUCKET_NAME: ${self:custom.fileUploadBucketName}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - cognito-idp:AdminInitiateAuth
            - cognito-idp:AdminCreateUser
            - cognito-idp:AdminSetUserPassword
          Resource: '*'

        - Effect: Allow
          Action:
            - s3:*
          Resource:
            - arn:aws:s3:::${self:custom.fileUploadBucketName}/*

        - Effect: Allow
          Action:
            - dynamodb:*
          Resource:
            - arn:aws:dynamodb:us-east-1:513476794027:table/Users

        - Effect: Allow
          Action:
            - dynamodb:*
          Resource:
            - arn:aws:dynamodb:us-east-1:513476794027:table/Images

functions:
  preSignUp:
    handler: src/functions/preSignUp/handler.handler
    events:
      - cognitoUserPool:
          pool: image-auth-pool
          trigger: PreSignUp
          existing: true
          forceDeploy: true

  signupUser:
    handler: src/functions/signup/handler.signup
    events:
      - httpApi:
          path: /signup
          method: post
          # cors: true

  loginUser:
    handler: src/functions/login/handler.login
    events:
      - httpApi:
          path: /login
          method: post
          # cors: true

  getPresignedUrl:
    handler: src/functions/getPresignedUrl/handler.getPresignedUrl
    events:
      - http:
          path: /getPresignedUrl
          method: get
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email

  getAllImages:
    handler: src/functions/getAllImages/handler.getAllImages
    events:
      - http:
          path: /getAllImages
          method: get
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email

  removeImage:
    handler: src/functions/removeImage/handler.removeImage
    events:
      - http:
          path: /removeImage/{image}
          method: delete
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email

resources:
  Resources:
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: image-auth-pool
        Schema:
          - Name: email
            Required: true
            Mutable: true
        Policies:
          PasswordPolicy:
            MinimumLength: 6

    UserClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: user-pool-ui
        GenerateSecret: false
        UserPoolId: { Ref: UserPool }
        AccessTokenValidity: 5
        IdTokenValidity: 5
        ExplicitAuthFlows:
          - 'ADMIN_NO_SRP_AUTH'

    ImageS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.fileUploadBucketName}
        AccessControl: PublicRead
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - HEAD
              AllowedOrigins:
                - '*'

    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Users
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH

    ImagesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Images
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
